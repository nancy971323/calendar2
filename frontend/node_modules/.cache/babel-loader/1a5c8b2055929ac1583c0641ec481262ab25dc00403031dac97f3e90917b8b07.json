{"ast":null,"code":"import { SET_CURRENT_USER, SET_AUTH_TOKEN, SET_AUTH_ERROR, CLEAR_AUTH } from '../mutation-types';\nimport api from '../../utils/api';\n\n// 初始狀態\nconst state = {\n  token: localStorage.getItem('token') || null,\n  currentUser: null,\n  error: null\n};\n\n// 獲取器\nconst getters = {\n  isAuthenticated: state => !!state.token && !!state.currentUser,\n  currentUser: state => state.currentUser,\n  authError: state => state.error\n};\n\n// 動作\nconst actions = {\n  // 登入\n  async login({\n    commit\n  }, credentials) {\n    try {\n      const response = await api.post('/api/auth/login', credentials);\n      const {\n        token,\n        employee\n      } = response.data;\n\n      // 存儲token和用戶信息\n      localStorage.setItem('token', token);\n      commit(SET_AUTH_TOKEN, token);\n      commit(SET_CURRENT_USER, employee);\n      commit(SET_AUTH_ERROR, null);\n      return employee;\n    } catch (error) {\n      commit(SET_AUTH_ERROR, error.response?.data || '登入失敗');\n      throw error;\n    }\n  },\n  // 登出\n  async logout({\n    commit\n  }) {\n    try {\n      await api.post('/api/auth/logout');\n    } catch (error) {\n      console.error('登出API請求失敗:', error);\n    } finally {\n      // 無論API成功與否，都清除本地身份驗證狀態\n      localStorage.removeItem('token');\n      commit(CLEAR_AUTH);\n    }\n  },\n  // 檢查身份驗證狀態\n  async checkAuth({\n    commit,\n    state\n  }) {\n    if (!state.token) {\n      commit(CLEAR_AUTH);\n      return;\n    }\n    try {\n      const response = await api.get('/api/auth/me');\n      commit(SET_CURRENT_USER, response.data);\n    } catch (error) {\n      console.error('檢查身份驗證失敗:', error);\n      localStorage.removeItem('token');\n      commit(CLEAR_AUTH);\n      throw error;\n    }\n  }\n};\n\n// 變異\nconst mutations = {\n  [SET_AUTH_TOKEN](state, token) {\n    state.token = token;\n  },\n  [SET_CURRENT_USER](state, user) {\n    state.currentUser = user;\n  },\n  [SET_AUTH_ERROR](state, error) {\n    state.error = error;\n  },\n  [CLEAR_AUTH](state) {\n    state.token = null;\n    state.currentUser = null;\n    state.error = null;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["SET_CURRENT_USER","SET_AUTH_TOKEN","SET_AUTH_ERROR","CLEAR_AUTH","api","state","token","localStorage","getItem","currentUser","error","getters","isAuthenticated","authError","actions","login","commit","credentials","response","post","employee","data","setItem","logout","console","removeItem","checkAuth","get","mutations","user","namespaced"],"sources":["/Users/lidiannan/Documents/GitHub/calendar2/frontend/src/store/modules/auth.js"],"sourcesContent":["import { \n    SET_CURRENT_USER, \n    SET_AUTH_TOKEN, \n    SET_AUTH_ERROR, \n    CLEAR_AUTH \n  } from '../mutation-types'\n  import api from '../../utils/api'\n  \n  // 初始狀態\n  const state = {\n    token: localStorage.getItem('token') || null,\n    currentUser: null,\n    error: null\n  }\n  \n  // 獲取器\n  const getters = {\n    isAuthenticated: state => !!state.token && !!state.currentUser,\n    currentUser: state => state.currentUser,\n    authError: state => state.error\n  }\n  \n  // 動作\n  const actions = {\n    // 登入\n    async login({ commit }, credentials) {\n      try {\n        const response = await api.post('/api/auth/login', credentials)\n        const { token, employee } = response.data\n        \n        // 存儲token和用戶信息\n        localStorage.setItem('token', token)\n        commit(SET_AUTH_TOKEN, token)\n        commit(SET_CURRENT_USER, employee)\n        commit(SET_AUTH_ERROR, null)\n        \n        return employee\n      } catch (error) {\n        commit(SET_AUTH_ERROR, error.response?.data || '登入失敗')\n        throw error\n      }\n    },\n    \n    // 登出\n    async logout({ commit }) {\n      try {\n        await api.post('/api/auth/logout')\n      } catch (error) {\n        console.error('登出API請求失敗:', error)\n      } finally {\n        // 無論API成功與否，都清除本地身份驗證狀態\n        localStorage.removeItem('token')\n        commit(CLEAR_AUTH)\n      }\n    },\n    \n    // 檢查身份驗證狀態\n    async checkAuth({ commit, state }) {\n      if (!state.token) {\n        commit(CLEAR_AUTH)\n        return\n      }\n      \n      try {\n        const response = await api.get('/api/auth/me')\n        commit(SET_CURRENT_USER, response.data)\n      } catch (error) {\n        console.error('檢查身份驗證失敗:', error)\n        localStorage.removeItem('token')\n        commit(CLEAR_AUTH)\n        throw error\n      }\n    }\n  }\n  \n  // 變異\n  const mutations = {\n    [SET_AUTH_TOKEN](state, token) {\n      state.token = token\n    },\n    [SET_CURRENT_USER](state, user) {\n      state.currentUser = user\n    },\n    [SET_AUTH_ERROR](state, error) {\n      state.error = error\n    },\n    [CLEAR_AUTH](state) {\n      state.token = null\n      state.currentUser = null\n      state.error = null\n    }\n  }\n  \n  export default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}