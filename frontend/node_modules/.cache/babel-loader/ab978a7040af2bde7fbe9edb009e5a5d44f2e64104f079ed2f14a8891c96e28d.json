{"ast":null,"code":"import { SET_EMPLOYEES, SET_EMPLOYEE, ADD_EMPLOYEE, UPDATE_EMPLOYEE, REMOVE_EMPLOYEE, SET_SECURITY_LEVELS } from '../mutation-types';\nimport api from '../../utils/api';\n\n// 初始狀態\nconst state = {\n  employees: [],\n  currentEmployee: null,\n  securityLevels: null\n};\n\n// 獲取器\nconst getters = {\n  employees: state => state.employees,\n  currentEmployee: state => state.currentEmployee,\n  securityLevels: state => state.securityLevels,\n  // 取得指定安全等級的員工列表\n  employeesBySecurityLevel: state => level => {\n    return state.employees.filter(employee => employee.securityLevel === level);\n  },\n  // 取得員工名稱對應表 (id -> fullName)\n  employeeNameMap: state => {\n    const map = {};\n    state.employees.forEach(employee => {\n      map[employee.id] = employee.fullName;\n    });\n    return map;\n  }\n};\n\n// 動作\nconst actions = {\n  // 獲取所有員工\n  async fetchEmployees({\n    commit\n  }) {\n    try {\n      const response = await api.get('/api/employees');\n      commit(SET_EMPLOYEES, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取員工列表失敗:', error);\n      throw error;\n    }\n  },\n  // 獲取所有活躍員工\n  async fetchActiveEmployees({\n    commit\n  }) {\n    try {\n      const response = await api.get('/api/employees/active');\n      commit(SET_EMPLOYEES, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取活躍員工列表失敗:', error);\n      throw error;\n    }\n  },\n  // 獲取員工詳情\n  async fetchEmployee({\n    commit\n  }, id) {\n    try {\n      const response = await api.get(`/api/employees/${id}`);\n      commit(SET_EMPLOYEE, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取員工詳情失敗:', error);\n      throw error;\n    }\n  },\n  // 創建員工\n  async createEmployee({\n    commit\n  }, employeeData) {\n    try {\n      const response = await api.post('/api/employees', employeeData);\n      commit(ADD_EMPLOYEE, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('創建員工失敗:', error);\n      throw error;\n    }\n  },\n  // 更新員工\n  async updateEmployee({\n    commit\n  }, {\n    id,\n    employeeData\n  }) {\n    try {\n      const response = await api.put(`/api/employees/${id}`, employeeData);\n      commit(UPDATE_EMPLOYEE, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('更新員工失敗:', error);\n      throw error;\n    }\n  },\n  // 更新員工密碼\n  async updateEmployeePassword({}, {\n    id,\n    password\n  }) {\n    try {\n      await api.put(`/api/employees/${id}/password`, {\n        password\n      });\n      return true;\n    } catch (error) {\n      console.error('更新員工密碼失敗:', error);\n      throw error;\n    }\n  },\n  // 刪除員工\n  async deleteEmployee({\n    commit\n  }, id) {\n    try {\n      await api.delete(`/api/employees/${id}`);\n      commit(REMOVE_EMPLOYEE, id);\n      return true;\n    } catch (error) {\n      console.error('刪除員工失敗:', error);\n      throw error;\n    }\n  },\n  // 獲取安全等級列表\n  async fetchSecurityLevels({\n    commit\n  }) {\n    try {\n      const response = await api.get('/api/employees/security-levels');\n      commit(SET_SECURITY_LEVELS, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取安全等級列表失敗:', error);\n      throw error;\n    }\n  },\n  // 根據部門獲取員工\n  async fetchEmployeesByDepartment({\n    commit\n  }, department) {\n    try {\n      const response = await api.get(`/api/employees/department/${department}`);\n      commit(SET_EMPLOYEES, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取部門員工列表失敗:', error);\n      throw error;\n    }\n  },\n  // 根據安全等級獲取員工\n  async fetchEmployeesBySecurityLevel({\n    commit\n  }, level) {\n    try {\n      const response = await api.get(`/api/employees/security-level/${level}`);\n      commit(SET_EMPLOYEES, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取安全等級員工列表失敗:', error);\n      throw error;\n    }\n  },\n  // 獲取安全等級低於指定等級的員工\n  async fetchEmployeesWithLowerSecurityLevel({\n    commit\n  }, level) {\n    try {\n      const response = await api.get(`/api/employees/lower-security-level/${level}`);\n      commit(SET_EMPLOYEES, response.data);\n      return response.data;\n    } catch (error) {\n      console.error('獲取低安全等級員工列表失敗:', error);\n      throw error;\n    }\n  }\n};\n\n// 變異\nconst mutations = {\n  [SET_EMPLOYEES](state, employees) {\n    state.employees = employees;\n  },\n  [SET_EMPLOYEE](state, employee) {\n    state.currentEmployee = employee;\n  },\n  [ADD_EMPLOYEE](state, employee) {\n    state.employees.push(employee);\n  },\n  [UPDATE_EMPLOYEE](state, updatedEmployee) {\n    const index = state.employees.findIndex(e => e.id === updatedEmployee.id);\n    if (index !== -1) {\n      state.employees.splice(index, 1, updatedEmployee);\n    }\n    if (state.currentEmployee && state.currentEmployee.id === updatedEmployee.id) {\n      state.currentEmployee = updatedEmployee;\n    }\n  },\n  [REMOVE_EMPLOYEE](state, id) {\n    state.employees = state.employees.filter(employee => employee.id !== id);\n    if (state.currentEmployee && state.currentEmployee.id === id) {\n      state.currentEmployee = null;\n    }\n  },\n  [SET_SECURITY_LEVELS](state, securityLevels) {\n    state.securityLevels = securityLevels;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["SET_EMPLOYEES","SET_EMPLOYEE","ADD_EMPLOYEE","UPDATE_EMPLOYEE","REMOVE_EMPLOYEE","SET_SECURITY_LEVELS","api","state","employees","currentEmployee","securityLevels","getters","employeesBySecurityLevel","level","filter","employee","securityLevel","employeeNameMap","map","forEach","id","fullName","actions","fetchEmployees","commit","response","get","data","error","console","fetchActiveEmployees","fetchEmployee","createEmployee","employeeData","post","updateEmployee","put","updateEmployeePassword","password","deleteEmployee","delete","fetchSecurityLevels","fetchEmployeesByDepartment","department","fetchEmployeesBySecurityLevel","fetchEmployeesWithLowerSecurityLevel","mutations","push","updatedEmployee","index","findIndex","e","splice","namespaced"],"sources":["/Users/lidiannan/Documents/GitHub/calendar2/frontend/src/store/modules/employee.js"],"sourcesContent":["import { \n    SET_EMPLOYEES, \n    SET_EMPLOYEE, \n    ADD_EMPLOYEE, \n    UPDATE_EMPLOYEE, \n    REMOVE_EMPLOYEE,\n    SET_SECURITY_LEVELS\n  } from '../mutation-types'\n  import api from '../../utils/api'\n  \n  // 初始狀態\n  const state = {\n    employees: [],\n    currentEmployee: null,\n    securityLevels: null\n  }\n  \n  // 獲取器\n  const getters = {\n    employees: state => state.employees,\n    currentEmployee: state => state.currentEmployee,\n    securityLevels: state => state.securityLevels,\n    // 取得指定安全等級的員工列表\n    employeesBySecurityLevel: state => level => {\n      return state.employees.filter(employee => employee.securityLevel === level)\n    },\n    // 取得員工名稱對應表 (id -> fullName)\n    employeeNameMap: state => {\n      const map = {}\n      state.employees.forEach(employee => {\n        map[employee.id] = employee.fullName\n      })\n      return map\n    }\n  }\n  \n  // 動作\n  const actions = {\n    // 獲取所有員工\n    async fetchEmployees({ commit }) {\n      try {\n        const response = await api.get('/api/employees')\n        commit(SET_EMPLOYEES, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取員工列表失敗:', error)\n        throw error\n      }\n    },\n    \n    // 獲取所有活躍員工\n    async fetchActiveEmployees({ commit }) {\n      try {\n        const response = await api.get('/api/employees/active')\n        commit(SET_EMPLOYEES, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取活躍員工列表失敗:', error)\n        throw error\n      }\n    },\n    \n    // 獲取員工詳情\n    async fetchEmployee({ commit }, id) {\n      try {\n        const response = await api.get(`/api/employees/${id}`)\n        commit(SET_EMPLOYEE, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取員工詳情失敗:', error)\n        throw error\n      }\n    },\n    \n    // 創建員工\n    async createEmployee({ commit }, employeeData) {\n      try {\n        const response = await api.post('/api/employees', employeeData)\n        commit(ADD_EMPLOYEE, response.data)\n        return response.data\n      } catch (error) {\n        console.error('創建員工失敗:', error)\n        throw error\n      }\n    },\n    \n    // 更新員工\n    async updateEmployee({ commit }, { id, employeeData }) {\n      try {\n        const response = await api.put(`/api/employees/${id}`, employeeData)\n        commit(UPDATE_EMPLOYEE, response.data)\n        return response.data\n      } catch (error) {\n        console.error('更新員工失敗:', error)\n        throw error\n      }\n    },\n    \n    // 更新員工密碼\n    async updateEmployeePassword({ }, { id, password }) {\n      try {\n        await api.put(`/api/employees/${id}/password`, { password })\n        return true\n      } catch (error) {\n        console.error('更新員工密碼失敗:', error)\n        throw error\n      }\n    },\n    \n    // 刪除員工\n    async deleteEmployee({ commit }, id) {\n      try {\n        await api.delete(`/api/employees/${id}`)\n        commit(REMOVE_EMPLOYEE, id)\n        return true\n      } catch (error) {\n        console.error('刪除員工失敗:', error)\n        throw error\n      }\n    },\n    \n    // 獲取安全等級列表\n    async fetchSecurityLevels({ commit }) {\n      try {\n        const response = await api.get('/api/employees/security-levels')\n        commit(SET_SECURITY_LEVELS, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取安全等級列表失敗:', error)\n        throw error\n      }\n    },\n    \n    // 根據部門獲取員工\n    async fetchEmployeesByDepartment({ commit }, department) {\n      try {\n        const response = await api.get(`/api/employees/department/${department}`)\n        commit(SET_EMPLOYEES, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取部門員工列表失敗:', error)\n        throw error\n      }\n    },\n    \n    // 根據安全等級獲取員工\n    async fetchEmployeesBySecurityLevel({ commit }, level) {\n      try {\n        const response = await api.get(`/api/employees/security-level/${level}`)\n        commit(SET_EMPLOYEES, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取安全等級員工列表失敗:', error)\n        throw error\n      }\n    },\n    \n    // 獲取安全等級低於指定等級的員工\n    async fetchEmployeesWithLowerSecurityLevel({ commit }, level) {\n      try {\n        const response = await api.get(`/api/employees/lower-security-level/${level}`)\n        commit(SET_EMPLOYEES, response.data)\n        return response.data\n      } catch (error) {\n        console.error('獲取低安全等級員工列表失敗:', error)\n        throw error\n      }\n    }\n  }\n  \n  // 變異\n  const mutations = {\n    [SET_EMPLOYEES](state, employees) {\n      state.employees = employees\n    },\n    [SET_EMPLOYEE](state, employee) {\n      state.currentEmployee = employee\n    },\n    [ADD_EMPLOYEE](state, employee) {\n      state.employees.push(employee)\n    },\n    [UPDATE_EMPLOYEE](state, updatedEmployee) {\n      const index = state.employees.findIndex(e => e.id === updatedEmployee.id)\n      if (index !== -1) {\n        state.employees.splice(index, 1, updatedEmployee)\n      }\n      if (state.currentEmployee && state.currentEmployee.id === updatedEmployee.id) {\n        state.currentEmployee = updatedEmployee\n      }\n    },\n    [REMOVE_EMPLOYEE](state, id) {\n      state.employees = state.employees.filter(employee => employee.id !== id)\n      if (state.currentEmployee && state.currentEmployee.id === id) {\n        state.currentEmployee = null\n      }\n    },\n    [SET_SECURITY_LEVELS](state, securityLevels) {\n      state.securityLevels = securityLevels\n    }\n  }\n  \n  export default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}